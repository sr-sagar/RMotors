// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  userName        String
  userEmail       String    @unique
  userPhoneNumber String
  userPassword    String
  userRole        String    @default("user")
  userLocation    String    @default("")
  userBio         String    @default("")
  
  sentMessage     Message[] @relation("sender")
  receivedMessage Message[] @relation("receiver")

  ownedRoom Room[] @relation("productOwner")
  customerRoom Room[] @relation("customer")

  cart            Cart?
  order           Order[]
  createdAt       DateTime  @default(now())
  Product         Product[]
}

enum ProductAvailability {
  Available
  Pending
  Sold

}

enum ProductTransmission {
  Automatic
  Manual
  Hybrid
}

model Product {
  id                 String      @id @default(uuid())
  productTitle       String
  productDescription String
  productPrice       Decimal
  productCost        Decimal
  productImageURLs   String[]
  productUploaderId  String
  productAvailability ProductAvailability @default(Available)
  productCategory String @default("petrol")
  productLocation String 
  productTotalMiles String
  productYear String
  productTransmission ProductTransmission @default(Manual) 
  productQuantity Int @default(1)
  productPriceBeforeDiscount Decimal
  uploader           User        @relation(fields: [productUploaderId], references: [id], onDelete: Cascade)
  cartItems          CartItem[]
  orderItems         OrderItem[]
  room Room[] 
  createdAt DateTime @default(now())
}


model Room {
  id String @id @default(cuid())
  productId String 
  product Product @relation(fields: [productId], references: [id])
  productOwnerId String 
  productOwner User @relation("productOwner",fields: [productOwnerId], references: [id], onDelete: Cascade)
  customerId String
  customer User @relation("customer",fields: [customerId], references: [id], onDelete: Cascade)
  message Message[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([productId, customerId], map: "productId_CustomerId")

}

model Message {
  id         String   @id @default(cuid())
  message    String
  senderId    String
  sender      User     @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId    String
  receiver      User     @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  roomId String
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  readStatus Boolean @default(false)
  sentAt     DateTime @default(now())
}



enum OrderStatus {
  Delivered
  Pending
  Canceled
  Dispatched
  Self_Pickup
}

model Order {
  id          String      @id @default(uuid())
  orderStatus OrderStatus @default(Pending)
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  order       OrderItem[]
  deliveryDate String @default("Not Available")
  orderedAt   DateTime    @default(now())
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
}
